{"code":{"__map":true,"values":[["1","const {h, render} = import(\"./preact.standalone.module.js\");\nconst {stringify, parse} = import (\"./stable-stringify.js\");\n\n(() => {\n    const div = document.createElement(\"div\");\n    div.innerHTML = `<div id=\"pad\"></div>\n    <div id=\"buttonBox\">\n      <button id=\"runButton\">run</button>\n      <button id=\"addButton\">add</button>\n      <button id=\"saveButton\">save</button>\n      <button id=\"loadButton\">load</button>\n    </div>\n    <div id=\"iframeHolder\">\n      <iframe id=\"innerWindow\" src=\"window.html\"></iframe>\n    </div>\n    <link id=\"pad-css\" rel=\"stylesheet\" href=\"./pad.css\" />\n`;\n    console.log(div.childNodes);\n\n    const renkon = document.querySelector(\"#renkon\");\n    renkon.querySelector(\"#pad\")?.remove();\n    renkon.querySelector(\"#buttonBox\")?.remove();\n    renkon.querySelector(\"#iframeHolder\")?.remove();\n    renkon.querySelector(\"#codemirror-loader\")?.remove();\n    renkon.querySelector(\"#pad-css\")?.remove();\n\n    renkon.appendChild(div.querySelector(\"#pad\"));\n    renkon.appendChild(div.querySelector(\"#buttonBox\"));\n    renkon.appendChild(div.querySelector(\"#pad-css\"));\n    //    renkon.appendChild(div.querySelector(\"#iframeHolder\"));\n\n    const script = document.createElement(\"script\");\n    script.id = \"codemirror-loader\"\n    script.type = \"module\";\n    script.innerText = `import {CodeMirror} from \"./renkon-web.js\";\n      window.CodeMirror = CodeMirror;\n    `;\n\n    renkon.appendChild(script);\n\n})();\n"],["2","    // [id]\n    const windows = Behaviors.select(\n        [],\n        loadRequest, (now, data) => {\n            console.log(\"windows loaded\");\n            return data.windows\n        },\n        Events.change(newId), (now, id) => [...now, `${id}`],\n        remove, (now, removeCommand) => now.filter((e) => e != removeCommand.id),\n    );\n\n    // {id, x: number, y: number, width: number, height: number}\n    const positions = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, data) => {\n            console.log(\"positions loaded\");\n            return data.positions\n        },\n        Events.change(windows), (now, command) => {\n            const keys = [...now.map.keys()];\n            const news = command.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !command.includes(e));\n\n            const newWindow = (id) => ({\n                id,\n                x: Number.parseInt(id) * 30,\n                y:  Number.parseInt(id) * 30,\n                width: 300,\n                height: 200\n            });\n\n            olds.forEach((e) => now.map.delete(`${e}`));\n            news.forEach((e) => now.map.set(`${e}`, newWindow(e)));\n            return {map: now.map};\n        },\n        moveOrResize, (now, command) => {\n            if (command.type === \"move\" || command.type === \"resize\") {\n                const v = {...now.map.get(command.id)};\n                if (command.x !== undefined) v.x = command.x;\n                if (command.y !== undefined) v.y = command.y;\n                if (command.width !== undefined) v.width = command.width;\n                if (command.height !== undefined) v.height = command.height;\n                now.map.set(command.id, v);\n                return {map: now.map};\n            }\n            return now\n        },\n    );\n\n    const titles = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, loaded) => {\n            console.log(\"titles loaded\");\n            return loaded.titles || {map: new Map()};\n        },\n        Events.change(windows), (now, command) => {\n            const keys = [...now.map.keys()];\n            const news = command.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !command.includes(e));\n\n            olds.forEach((e) => now.map.delete(`${e}`));\n            news.forEach((e) => now.map.set(`${e}`, {id: `${e}`, state: false, title: \"untitled\"}));\n            return {map: now.map};\n        },\n        titleEditChange, (now, change) => {\n            const {id, state, title} = change;\n            const v = {...now.map.get(id)};\n            if (title) v.title = title;\n            if (state !== undefined) v.state = state;\n            now.map.set(id, v);\n            return {map: now.map};\n        }\n    );\n\n    const codeEditors = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, loaded) => {\n            for (let editor of now.map.values()) {\n                editor.dom.remove();\n            }\n            now.map.clear();\n\n            for (let [id, code] of loaded.code) {\n                now.map.set(id, newEditor(id, code));\n            }\n            return {map: now.map};\n        },\n        Events.change(windows), (now, command) => {\n            const keys = [...now.map.keys()];\n            const news = command.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !command.includes(e));\n            olds.forEach((e) => {\n                const editor = now.map.get(`${e}`);\n                editor.dom.remove();\n                now.map.delete(`${e}`)\n            });\n            news.forEach((e) => now.map.set(`${e}`, newEditor(e)));\n            return {map: now.map};\n        }\n    );\n\n    const init = Events.change(Behaviors.keep(0));\n\n    const newId = Behaviors.select(\n        0,\n        loadRequest, (now, request) => {\n            return request.windows.length + 1;\n        },\n        Events.or(add, init), (now) => now + 1\n    );\n\n    const newEditor = (id, doc) => {\n        const mirror = window.CodeMirror;\n        const editor = new mirror.EditorView({\n            doc: doc || \"hello\",\n            extensions: [\n                mirror.basicSetup,\n                mirror.EditorView.lineWrapping,\n                mirror.EditorView.editorAttributes.of({\"class\": \"editor\"})\n            ],\n        });\n        editor.dom.id = `${id}-editor`;\n        return editor;\n    }\n"],["3","    const run = Events.listener(\"#runButton\", \"click\", (evt) => evt);\n    const add = Events.listener(\"#addButton\", \"click\", (evt) => evt);\n    const save = Events.listener(\"#saveButton\", \"click\", (evt) => evt);\n    const load = Events.listener(\"#loadButton\", \"click\", (evt) => evt);\n\n    const _onRun = ((run, codeEditors) => {\n        const innerIframe = document.querySelector(\"#innerWindow\");\n        const code = [...codeEditors.map.values()].map((editor) => editor.state.doc.toString());\n        console.log(code);\n        innerIframe.contentWindow.postMessage({code: code});\n    })(run, codeEditors);\n"],["4","    const windowDOM = (id, position, title, codeEditor) => {\n        return h(\"div\", {\n            key: `${id}`,\n            id: `${id}-win`,\n            style: {\n                position: \"absolute\",\n                left: `${position.x}px`,\n                top: `${position.y}px`,\n                width: `${position.width}px`,\n                height: `${position.height}px`,\n                backgroundColor: \"#eee\",\n            },\n            ref: (ref) => {\n                if (ref) {\n                    ref.appendChild(codeEditor.dom);\n                }\n            }\n        }, [\n            h(\"div\", {\n                id: `${id}-titleBar`,\n                \"class\": \"titleBar\",\n            }, [\n                h(\"div\", {\n                    id: `${id}-title`,\n                    \"class\": \"title\",\n                    contentEditable: `${title.state}`,\n                    onKeydown: inputHandler,\n                }, title.title),\n                h(\"div\", {\n                    id: `${id}-edit`,\n                    \"class\": `editButton`,\n                    onClick: (evt) => {\n                        console.log(evt);\n                        Events.send(titleEditChange, {id: `${Number.parseInt(evt.target.id)}`, state: !title.state});\n                    },\n                }, []),\n                h(\"div\", {\n                    id: `${id}-close`,\n                    \"class\": \"closeButton\",\n                    onClick: (evt) => {\n                        Events.send(remove, {id: `${Number.parseInt(evt.target.id)}`, type: \"remove\"})\n                    }\n                }),\n            ]),\n            h(\"div\", {\n                id: `${id}-resize`,\n                \"class\": \"resizeHandler\",\n            }, [])\n        ])\n    };\n\n    const windowElements = ((windows, positions, titles, codeEditors) => {\n        return h(\"div\", {\"class\": \"owner\"}, windows.map((id) => {\n            return windowDOM(id, positions.map.get(id), titles.map.get(id), codeEditors.map.get(id));\n        }));\n    })(windows, positions, titles, codeEditors);\n\n    const _myRender = ((windowElements, padElement) => {\n        render(windowElements, padElement);\n    })(windowElements, document.querySelector(\"#pad\"));\n"],["5","    const loadRequest = Events.receiver();\n\n    const _saver = ((windows, positions, titles, codeEditors) => {\n        const code = new Map([...codeEditors.map].map(([id, editor]) => ([id, editor.state.doc.toString()])));\n        const data = stringify({\n            version: 1,\n            windows,\n            positions,\n            titles,\n            code\n        });\n\n        const div = document.createElement(\"a\");\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n        div.setAttribute(\"href\", dataStr);\n        div.setAttribute(\"download\", `renkon-pad.json`);\n        div.click();\n    })(windows, positions, titles, codeEditors, save);\n\n    const _loader = (() => {\n        const input = document.createElement(\"div\");\n        input.innerHTML = `<input id=\"imageinput\" type=\"file\" accept=\"application/json\">`;\n        const imageInput = input.firstChild;\n\n        imageInput.onchange = () => {\n            const file = imageInput.files[0];\n            if (!file) {return;}\n            new Promise(resolve => {\n                let reader = new FileReader();\n                reader.onload = () => resolve(reader.result);\n                reader.readAsArrayBuffer(file);\n            }).then((data) => {\n                const result = new TextDecoder(\"utf-8\").decode(data);\n                const loaded = parse(result);\n                if (loaded.version === 1) {\n                    Events.send(loadRequest, loaded);\n                }\n            })\n            imageInput.value = \"\";\n        };\n        document.body.appendChild(imageInput);\n        imageInput.click();\n    })(load);\n"],["6","    const remove = Events.receiver();\n    const titleEditChange = Events.receiver();\n\n    const padDown = Events.listener(\"#pad\", \"pointerdown\", (evt) => {\n        const strId = evt.target.id;\n        if (!strId) {return;}\n        const id = `${Number.parseInt(strId)}`;\n        let type;\n        if (strId.endsWith(\"-win\")) {\n            type = \"moveDown\";\n        } else if (strId.endsWith(\"-resize\")) {\n            type = \"windowResizeDown\";\n        }\n        if (type) {\n            evt.target.setPointerCapture(evt.pointerId);\n            return {id, target: evt.target, type, x: evt.clientX, y: evt.clientY};\n        }\n    });\n\n    const padUp = Events.listener(\"#pad\", \"pointerup\", (evt) => {\n        evt.target.releasePointerCapture(evt.pointerId);\n        return {type: \"pointerup\", x: evt.clientX, y: evt.clientY};\n    });\n\n    const downOrUpOrResize = Events.or(padDown, padUp, windowResize);\n\n    const _padMove = Events.listener(\"#pad\", \"pointermove\", moveCompute);\n\n    const windowResize = Events.receiver();\n    const moveOrResize = Events.receiver();\n\n    console.log(\"newId\", newId);\n\n    const moveCompute = ((downOrUpOrResize, positions) => {\n        // console.log(\"moveCompute\", downOrUpOrResize, positions);\n        if (downOrUpOrResize.type === \"moveDown\" || downOrUpOrResize.type === \"windowResizeDown\") {\n            const start = positions.map.get(downOrUpOrResize.id);\n            const downPoint = {x: downOrUpOrResize.x, y: downOrUpOrResize.y};\n            const type = downOrUpOrResize.type === \"moveDown\" ? \"move\" : \"resize\";\n            return (move) => {\n                // console.log(\"pointermove\", downOrUpOrResize, start);\n                const diffX = move.clientX - downPoint.x;\n                const diffY = move.clientY - downPoint.y;\n                const result = {id: downOrUpOrResize.id, type};\n                if (type === \"move\") {\n                    result.x = start.x + diffX;\n                    result.y = start.y + diffY;\n                } else {\n                    result.width = start.width + diffX;\n                    result.height = start.height + diffY;\n                }\n                Events.send(moveOrResize, result);\n            }\n        } else if (downOrUpOrResize.type === \"pointerup\") {\n            return null;\n        }\n    })(downOrUpOrResize, positions);\n\n    const inputHandler = (evt) => {\n        if (evt.key === \"Enter\") {\n            evt.preventDefault();\n            evt.stopPropagation();\n            Events.send(titleEditChange, {\n                id: `${Number.parseInt(evt.target.id)}`,\n                title: evt.target.textContent,\n                state: false\n            });\n        }\n    }\n\n"]]},"positions":{"map":{"__map":true,"values":[["1",{"height":182.375,"id":"1","width":510.37890625,"x":30,"y":30}],["2",{"height":549.38671875,"id":"2","width":571.66015625,"x":548.109375,"y":27.12109375}],["3",{"height":202.4375,"id":"3","width":518.44140625,"x":18.92578125,"y":240.98046875}],["4",{"height":321.37109375,"id":"4","width":516.4375,"x":17.79296875,"y":464.90625}],["5",{"height":331.28515625,"id":"5","width":372.765625,"x":1129.5546875,"y":9.57421875}],["6",{"height":467.09375,"id":"6","width":610.37890625,"x":873.6015625,"y":614.99609375}]]}},"titles":{"map":{"__map":true,"values":[["1",{"id":"1","state":false,"title":"Initialization"}],["2",{"id":"2","state":false,"title":"untitled"}],["3",{"id":"3","state":false,"title":"Button Interaction"}],["4",{"id":"4","state":false,"title":"Rendering"}],["5",{"id":"5","state":false,"title":"untitled"}],["6",{"id":"6","state":false,"title":"Pointer Interaction"}]]}},"version":1,"windows":["1","2","3","4","5","6"]}
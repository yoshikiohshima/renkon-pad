{"code":{"__map":true,"values":[["1","const {h, render} = import(\"./preact.standalone.module.js\");\nconst {stringify, parse} = import (\"./stable-stringify.js\");\n\n(() => {\n    const div = document.createElement(\"div\");\n    div.innerHTML = `<div id=\"pad\"></div>\n    <div id=\"buttonBox\">\n      <button id=\"runButton\">run</button>\n      <button id=\"addButton\">add</button>\n      <button id=\"saveButton\">save</button>\n      <button id=\"loadButton\">load</button>\n    </div>\n    <div id=\"iframeHolder\">\n      <iframe id=\"innerWindow\" src=\"window.html\"></iframe>\n    </div>\n    <script id=\"codemirror-loader\" type=\"module\">\n      import {CodeMirror} from \"./renkon-web.js\";\ndebugger;\n      window.CodeMirror = CodeMirror;\n    </script>\n`;\n    console.log(div.childNodes);\n\n    const renkon = document.querySelector(\"#renkon\");\n    renkon.querySelector(\"#pad\")?.remove();\n    renkon.querySelector(\"#buttonBox\")?.remove();\n    renkon.querySelector(\"#iframeHolder\")?.remove();\n    renkon.querySelector(\"#codemirror-loader\")?.remove();\n\n    renkon.appendChild(div.querySelector(\"#pad\"));\n    renkon.appendChild(div.querySelector(\"#buttonBox\"));\n    renkon.appendChild(div.querySelector(\"#codemirror-loader\"));\n//    renkon.appendChild(div.querySelector(\"#iframeHolder\"));\n})();\n"],["2","const windows = Behaviors.select(\n    [],\n    loadRequest, (now, data) => {\n        console.log(\"windows loaded\");\n        return data.windows\n    },\n    Events.change(newId), (now, id) => [...now, `${id}`],\n    remove, (now, removeCommand) => now.filter((e) => e != removeCommand.id),\n);\n\n// {id, x: number, y: number, width: number, height: number}\nconst positions = Behaviors.select(\n    {map: new Map()},\n    loadRequest, (now, data) => {\n        console.log(\"positions loaded\");\n        return data.positions\n    },\n    Events.change(windows), (now, command) => {\n        const keys = [...now.map.keys()];\n        const news = command.filter((e) => !keys.includes(e));\n        const olds = keys.filter((e) => !command.includes(e));\n\n        const newWindow = (id) => ({\n            id,\n            x: Number.parseInt(id) * 30,\n            y:  Number.parseInt(id) * 30,\n            width: 300,\n            height: 200\n        });\n\n        olds.forEach((e) => now.map.delete(`${e}`));\n        news.forEach((e) => now.map.set(`${e}`, newWindow(e)));\n        return {map: now.map};\n    },\n    moveOrResize, (now, command) => {\n        if (command.type === \"move\" || command.type === \"resize\") {\n            const v = {...now.map.get(command.id)};\n            if (command.x !== undefined) v.x = command.x;\n            if (command.y !== undefined) v.y = command.y;\n            if (command.width !== undefined) v.width = command.width;\n            if (command.height !== undefined) v.height = command.height;\n            now.map.set(command.id, v);\n            return {map: now.map};\n        }\n        return now\n    },\n);\n\nconst codeEditors = Behaviors.select(\n    {map: new Map()},\n    loadRequest, (now, loaded) => {\n        debugger;\n        for (let editor of now.map.values()) {\n            editor.dom.remove();\n        }\n        now.map.clear();\n\n        for (let [id, code] of loaded.code) {\n            now.map.set(id, newEditor(id, code));\n        }\n        return {map: now.map};\n    },\n    Events.change(windows), (now, command) => {\n        const keys = [...now.map.keys()];\n        const news = command.filter((e) => !keys.includes(e));\n        const olds = keys.filter((e) => !command.includes(e));\n        olds.forEach((e) => {\n            const editor = now.map.get(`${e}`);\n            editor.dom.remove();\n            now.map.delete(`${e}`)\n        });\n        news.forEach((e) => now.map.set(`${e}`, newEditor(e)));\n        return {map: now.map};\n    }\n);\n\nconst init = Events.change(Behaviors.keep(0));\n\nconst newId = Behaviors.select(\n    0,\n    loadRequest, (now, request) => {\n        return request.windows.length + 1;\n    },\n    Events.or(add, init), (now) => now + 1\n);\n\nconst newEditor = (id, doc) => {\n    const mirror = window.CodeMirror;\n    const editor = new mirror.EditorView({\n        doc: doc || \"hello\",\n        extensions: [mirror.basicSetup, mirror.EditorView.lineWrapping],\n    });\n    editor.dom.classList.add(\"editor\");\n    editor.dom.id = `${id}-editor`;\n    return editor;\n}\n\n"],["3","const run = Events.listener(\"#runButton\", \"click\", (evt) => evt);\nconst add = Events.listener(\"#addButton\", \"click\", (evt) => evt);\nconst save = Events.listener(\"#saveButton\", \"click\", (evt) => evt);\nconst load = Events.listener(\"#loadButton\", \"click\", (evt) => evt);\n\nconst _onRun = ((run, codeEditors) => {\n    const innerIframe = document.querySelector(\"#innerWindow\");\n    const code = [...codeEditors.map.values()].map((editor) => editor.state.doc.toString());\n    console.log(code);\n    innerIframe.contentWindow.postMessage({code: code});\n})(run, codeEditors);\n\n"],["4","const windowDOM = (id, position, codeEditor) => {\n    return h(\"div\", {\n        key: `${id}`,\n        id: `${id}-win`,\n        style: {\n            position: \"absolute\",\n            left: `${position.x}px`,\n            top: `${position.y}px`,\n            width: `${position.width}px`,\n            height: `${position.height}px`,\n            backgroundColor: \"#ddd\",\n        },\n        ref: (ref) => {\n            if (ref) {\n                ref.appendChild(codeEditor.dom);\n            }\n        }\n    }, [\n        h(\"div\", {\n            id: `${id}-titleBar`,\n            \"class\": \"titleBar\",\n        }, [\n            h(\"div\", {\n                id: `${id}-title`,\n                \"class\": \"title\",\n            }),\n            h(\"div\", {\n                id: `${id}-close`,\n                \"class\": \"closeButton\",\n                onClick: (evt) => {\n                    console.log(evt);\n                    Events.send(remove, {id: `${Number.parseInt(evt.target.id)}`, type: \"remove\"})\n                }\n            }),\n        ]),\n        h(\"div\", {\n            id: `${id}-resize`,\n            \"class\": \"resizeHandler\",\n        }, [])\n    ])\n};\n\nconst windowElements = ((windows, positions, codeEditors) => {\n    return h(\"div\", {\"class\": \"owner\"}, windows.map((id) => {\n        return windowDOM(id, positions.map.get(id), codeEditors.map.get(id));\n    }));\n})(windows, positions, codeEditors);\n\nconst _myRender = ((windowElements, padElement) => {\n    render(windowElements, padElement);\n})(windowElements, document.querySelector(\"#pad\"));\n\n\n"],["5","const remove = Events.receiver();\n\nconst padDown = Events.listener(\"#pad\", \"pointerdown\", (evt) => {\n    const strId = evt.target.id;\n    if (!strId) {return;}\n    const id = `${Number.parseInt(strId)}`;\n    let type;\n    if (strId.endsWith(\"-win\")) {\n        type = \"moveDown\";\n    } else if (strId.endsWith(\"-resize\")) {\n        type = \"windowResizeDown\";\n    }\n    if (type) {\n        return {id, target: evt.target, type, x: evt.clientX, y: evt.clientY};\n    }\n});\n\nconst padUp = Events.listener(\"#pad\", \"pointerup\", (evt) => {\n    return {type: \"pointerup\", x: evt.clientX, y: evt.clientY};\n});\n\nconst downOrUpOrResize = Events.or(padDown, padUp, windowResize);\n\nconst _padMove = Events.listener(\"#pad\", \"pointermove\", moveCompute);\n\nconst windowResize = Events.receiver();\nconst moveOrResize = Events.receiver();\n\nconsole.log(\"newId\", newId);\n\nconst moveCompute = ((downOrUpOrResize, positions) => {\n    console.log(\"moveCompute\", downOrUpOrResize, positions);\n    if (downOrUpOrResize.type === \"moveDown\" || downOrUpOrResize.type === \"windowResizeDown\") {\n        const start = positions.map.get(downOrUpOrResize.id);\n        const downPoint = {x: downOrUpOrResize.x, y: downOrUpOrResize.y};\n        const type = downOrUpOrResize.type === \"moveDown\" ? \"move\" : \"resize\";\n        return (move) => {\n            // console.log(\"pointermove\", downOrUpOrResize, start);\n            const diffX = move.clientX - downPoint.x;\n            const diffY = move.clientY - downPoint.y;\n            const result = {id: downOrUpOrResize.id, type};\n            if (type === \"move\") {\n                result.x = start.x + diffX;\n                result.y = start.y + diffY;\n            } else {\n                result.width = start.width + diffX;\n                result.height = start.height + diffY;\n            }\n            Events.send(moveOrResize, result);\n        }\n    } else if (downOrUpOrResize.type === \"pointerup\") {\n        return null;\n    }\n})(downOrUpOrResize, positions);\n\n\n"],["6","const loadRequest = Events.receiver();\n\nconst _saver = ((windows, positions, codeEditors) => {\n    const code = new Map([...codeEditors.map].map(([id, editor]) => ([id, editor.state.doc.toString()])));\n    const data = stringify({\n        version: 1,\n        windows,\n        positions,\n        code\n    });\n\n    const div = document.createElement(\"a\");\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n    div.setAttribute(\"href\", dataStr);\n    div.setAttribute(\"download\", `renkon-pad.json`);\n    div.click();\n})(windows, positions, codeEditors, save);\n\nconst _loader = (() => {\n    const input = document.createElement(\"div\");\n    input.innerHTML = `<input id=\"imageinput\" type=\"file\" accept=\"application/json\">`;\n    const imageInput = input.firstChild;\n\n    imageInput.onchange = () => {\n        const file = imageInput.files[0];\n        if (!file) {return;}\n        new Promise(resolve => {\n            let reader = new FileReader();\n            reader.onload = () => resolve(reader.result);\n            reader.readAsArrayBuffer(file);\n        }).then((data) => {\n            const result = new TextDecoder(\"utf-8\").decode(data);\n            const loaded = parse(result);\n            if (loaded.version === 1) {\n                Events.send(loadRequest, loaded);\n            }\n        })\n        imageInput.value = \"\";\n    };\n    document.body.appendChild(imageInput);\n    imageInput.click();\n})(load);\n"]]},"positions":{"map":{"__map":true,"values":[["1",{"height":652.734375,"id":"1","width":574.73046875,"x":10.4375,"y":36.55078125}],["2",{"height":1175.10546875,"id":"2","width":633.84765625,"x":822.41015625,"y":44.5390625}],["3",{"height":263.796875,"id":"3","width":503.484375,"x":1221.5234375,"y":13.5234375}],["4",{"height":919.5546875,"id":"4","width":595.25,"x":1292.81640625,"y":338.7890625}],["5",{"height":1031.03515625,"id":"5","width":625.046875,"x":1727.80859375,"y":18.09765625}],["6",{"height":200,"id":"6","width":300,"x":1958.6328125,"y":1073.4453125}]]}},"version":1,"windows":["1","2","3","4","5","6"]}
{"code":{"__map":true,"values":[["1","const {h, html, render} = import(\"./preact.standalone.module.js\");\nconst {stringify, parse} = import(\"./stable-stringify.js\");\n\n(() => {\n    const div = document.createElement(\"div\");\n    div.innerHTML = `\n<div id=\"buttonBox\">\n   <button class=\"menuButton\" id=\"addCodeButton\">code</button>\n   <button class=\"menuButton\" id=\"addRunnerButton\">runner</button>\n   <div class=\"spacer\"></div>\n   <button class=\"menuButton\" id=\"showGraph\">show graph</button>\n   <button class=\"menuButton\" id=\"saveButton\">save</button>\n   <button class=\"menuButotn\" id=\"loadButton\">load</button>\n</div>\n<div id=\"pad\"></div>\n<link id=\"pad-css\" rel=\"stylesheet\" href=\"./pad.css\" />\n<div id=\"overlay\"></div>\n`.trim();\n    console.log(div.childNodes);\n\n    const renkon = document.querySelector(\"#renkon\");\n    renkon.querySelector(\"#pad\")?.remove();\n    renkon.querySelector(\"#buttonBox\")?.remove();\n    renkon.querySelector(\"#codemirror-loader\")?.remove();\n    renkon.querySelector(\"#pad-css\")?.remove();\n\n    renkon.appendChild(div.querySelector(\"#buttonBox\"));\n    renkon.appendChild(div.querySelector(\"#pad\"));\n    renkon.appendChild(div.querySelector(\"#pad-css\"));\n    //    renkon.appendChild(div.querySelector(\"#iframeHolder\"));\n\n    const script = document.createElement(\"script\");\n    script.id = \"codemirror-loader\"\n    script.type = \"module\";\n    script.innerText = `import {CodeMirror} from \"./renkon-web.js\";\n      window.CodeMirror = CodeMirror;\n    `;\n\n    renkon.appendChild(script);\n\n    const renkonParent = renkon.parentNode;\n    renkonParent.querySelector(\"#overlay\")?.remove();\n    renkonParent.appendChild(div.querySelector(\"#overlay\"));\n})();\n"],["2","    // [id:string]\n    const windows = Behaviors.select(\n        [],\n        loadRequest, (now, data) => {\n            console.log(\"windows loaded\");\n            return data.windows\n        },\n        newId, (now, id) => [...now, `${Number.parseInt(id)}`],\n        remove, (now, removeCommand) => now.filter((e) => e != removeCommand.id),\n    );\n\n    // {map: Map<id, type:\"code\"|\"runner\">\n    const windowTypes = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, data) => {\n            console.log(\"windowTypes loaded\");\n            return data.windowTypes;\n        },\n        newId, (now, spec) => {\n            const index = spec.indexOf(\"-\");\n            const id = Number.parseInt(spec);\n            const type = spec.slice(index + 1);\n            now.map.set(`${id}`, type);\n            return {map: now.map};\n        },\n        Events.change(windows), (now, windows) => {\n            const keys = [...now.map.keys()];\n            const news = windows.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !windows.includes(e));\n\n            olds.forEach((e) => now.map.delete(`${e}`));\n            news.forEach((e) => now.map.set(`${e}`, \"code\"));\n            return {map: now.map};\n        }\n    );\n\n    // {id, x: number, y: number, width: number, height: number}\n    const positions = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, data) => {\n            console.log(\"positions loaded\");\n            return data.positions\n        },\n        Events.change(windowTypes), (now, types) => {\n            const keys = [...now.map.keys()];\n            const typeKeys = [...types.map.keys()];\n            const news = typeKeys.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !typeKeys.includes(e));\n\n            const newWindow = (id, type) => {\n                return {\n                    id,\n                    x: typeKeys.length * 30,\n                    y: typeKeys.length * 30 + 30,\n                    width: type === \"code\" ? 300 : 800,\n                    height: type === \"code\" ? 200 : 400\n                }\n            };\n\n            olds.forEach((e) => now.map.delete(`${e}`));\n            news.forEach((e) => now.map.set(`${e}`, newWindow(e, types.map.get(e))));\n            return {map: now.map};\n        },\n        moveOrResize, (now, command) => {\n            if (command.type === \"move\" || command.type === \"resize\") {\n                const v = {...now.map.get(command.id)};\n                if (command.x !== undefined) v.x = command.x;\n                if (command.y !== undefined) v.y = command.y;\n                if (command.width !== undefined) v.width = command.width;\n                if (command.height !== undefined) v.height = command.height;\n                now.map.set(command.id, v);\n                return {map: now.map};\n            }\n            return now\n        },\n    );\n\n    const titles = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, loaded) => {\n            console.log(\"titles loaded\");\n            return loaded.titles || {map: new Map()};\n        },\n        Events.change(windows), (now, command) => {\n            const keys = [...now.map.keys()];\n            const news = command.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !command.includes(e));\n\n            olds.forEach((e) => now.map.delete(`${e}`));\n            news.forEach((e) => now.map.set(`${e}`, {id: `${e}`, state: false, title: \"untitled\"}));\n            return {map: now.map};\n        },\n        titleEditChange, (now, change) => {\n            const {id, state, title} = change;\n            const v = {...now.map.get(id)};\n            if (title) v.title = title;\n            if (state !== undefined) v.state = state;\n            now.map.set(id, v);\n            return {map: now.map};\n        }\n    );\n\n    const codeEditors = Behaviors.select(\n        {map: new Map()},\n        loadRequest, (now, loaded) => {\n            for (let editor of now.map.values()) {\n                editor.dom.remove();\n            }\n            now.map.clear();\n\n            for (let [id, type] of loaded.windowTypes.map) {\n                let elem;\n                if (type === \"code\") {\n                    elem = newEditor(id, loaded.code.get(id));\n                } else {\n                    elem = newRunner(id);\n                }\n                now.map.set(id, elem);\n            }\n            return {map: now.map};\n        },\n        Events.change(windowTypes), (now, types) => {\n            const keys = [...now.map.keys()];\n            const typeKeys = [...types.map.keys()];\n            const news = typeKeys.filter((e) => !keys.includes(e));\n            const olds = keys.filter((e) => !typeKeys.includes(e));\n            olds.forEach((e) => {\n                const editor = now.map.get(e);\n                editor.dom.remove();\n                now.map.delete(e)\n            });\n            news.forEach((id) => {\n                const type = types.map.get(id);\n                now.map.set(id, type === \"code\" ? newEditor(id) : newRunner(id));\n            });\n            return {map: now.map};\n        }\n    );\n\n    const init = Events.change(Behaviors.keep(\"code\"));\n\n    // it has <number>-(code|runner) structure.\n    // You might consider having newId for number and newType separate events but make it packed\n    // makes the windows and windowTypes access them from one function\n    const newId = Events.select(\n        \"0-code\",\n        loadRequest, (now, request) => {\n            return `${request.windows.length + 1}-`;\n        },\n        Events.or(addCode, addRunner, init), (now, type) => {\n            const id = Number.parseInt(now) + 1;\n            return `${id}-${type}`;\n        }\n    );\n\n    console.log(\"newId\", newId);\n\n    const newEditor = (id, doc) => {\n        const mirror = window.CodeMirror;\n        const editor = new mirror.EditorView({\n            doc: doc || \"hello\",\n            extensions: [\n                mirror.basicSetup,\n                mirror.EditorView.lineWrapping,\n                mirror.EditorView.editorAttributes.of({\"class\": \"editor\"})\n            ],\n        });\n        editor.dom.id = `${id}-editor`;\n        return editor;\n    };\n\n    const newRunner = (id) => {\n        const runnerIframe = document.createElement(\"iframe\");\n        runnerIframe.src = \"window.html\";\n        runnerIframe.classList = \"runnerIframe\";\n        runnerIframe.id = `runner-${id}`;\n        return {dom: runnerIframe};\n    }\n"],["4","    const addCode = Events.listener(\"#addCodeButton\", \"click\", () => \"code\");\n    const addRunner = Events.listener(\"#addRunnerButton\", \"click\", () => \"runner\");\n    const save = Events.listener(\"#saveButton\", \"click\", (evt) => evt);\n    const load = Events.listener(\"#loadButton\", \"click\", (evt) => evt);\n\n    const showGraph = Behaviors.collect(\n        true,\n        Events.listener(\"#showGraph\", \"click\", (evt) => evt),\n        (now, _click) => !now\n    );\n\n    document.querySelector(\"#showGraph\").textContent = showGraph ? \"show graph\" : \"hide graph\";\n\n    const _onRun = ((runRequest, codeEditors) => {\n        const id = runRequest.id;\n        const iframe = codeEditors.map.get(id);\n        const code = [...codeEditors.map.values()]\n            .filter((obj) => obj.state)\n            .map((editor) => editor.state.doc.toString());\n        iframe.dom.contentWindow.postMessage({code: code});\n    })(runRequest, codeEditors);\n\n    const remove = Events.receiver();\n    const titleEditChange = Events.receiver();\n    const runRequest = Events.receiver();\n\n    const padDown = Events.listener(\"#pad\", \"pointerdown\", (evt) => {\n        const strId = evt.target.id;\n        if (!strId) {return;}\n        const id = `${Number.parseInt(strId)}`;\n        let type;\n        if (strId.endsWith(\"-win\")) {\n            type = \"moveDown\";\n        } else if (strId.endsWith(\"-resize\")) {\n            type = \"windowResizeDown\";\n        }\n        if (type) {\n            evt.target.setPointerCapture(evt.pointerId);\n            return {id, target: evt.target, type, x: evt.clientX, y: evt.clientY};\n        }\n    });\n\n    const padUp = Events.listener(\"#pad\", \"pointerup\", (evt) => {\n        evt.target.releasePointerCapture(evt.pointerId);\n        return {type: \"pointerup\", x: evt.clientX, y: evt.clientY};\n    });\n\n    const downOrUpOrResize = Events.or(padDown, padUp, windowResize);\n\n    const _padMove = Events.listener(\"#pad\", \"pointermove\", moveCompute);\n\n    const windowResize = Events.receiver();\n    const moveOrResize = Events.receiver();\n\n    const moveCompute = ((downOrUpOrResize, positions) => {\n        // console.log(\"moveCompute\", downOrUpOrResize, positions);\n        if (downOrUpOrResize.type === \"moveDown\" || downOrUpOrResize.type === \"windowResizeDown\") {\n            const start = positions.map.get(downOrUpOrResize.id);\n            const downPoint = {x: downOrUpOrResize.x, y: downOrUpOrResize.y};\n            const type = downOrUpOrResize.type === \"moveDown\" ? \"move\" : \"resize\";\n            return (move) => {\n                // console.log(\"pointermove\", downOrUpOrResize, start);\n                const diffX = move.clientX - downPoint.x;\n                const diffY = move.clientY - downPoint.y;\n                const result = {id: downOrUpOrResize.id, type};\n                if (type === \"move\") {\n                    result.x = start.x + diffX;\n                    result.y = start.y + diffY;\n                } else {\n                    result.width = start.width + diffX;\n                    result.height = start.height + diffY;\n                }\n                Events.send(moveOrResize, result);\n            }\n        } else if (downOrUpOrResize.type === \"pointerup\") {\n            return null;\n        }\n    })(downOrUpOrResize, positions);\n\n    const inputHandler = (evt) => {\n        if (evt.key === \"Enter\") {\n            evt.preventDefault();\n            evt.stopPropagation();\n            Events.send(titleEditChange, {\n                id: `${Number.parseInt(evt.target.id)}`,\n                title: evt.target.textContent,\n                state: false\n            });\n        }\n    }\n"],["5","    const windowDOM = (id, position, title, codeEditor, type) => {\n        // console.log(\"windowDOM\");\n        return h(\"div\", {\n            key: `${id}`,\n            id: `${id}-win`,\n            \"class\": \"window\",\n            style: {\n                left: `${position.x}px`,\n                top: `${position.y}px`,\n                width: `${position.width}px`,\n                height: `${position.height}px`,\n            },\n            ref: (ref) => {\n                if (ref) {\n                    if (ref !== codeEditor.dom.parentNode) {\n                        ref.appendChild(codeEditor.dom);\n                    }\n                }\n            },\n            onPointerEnter: (evt) => Events.send(hovered, `${Number.parseInt(evt.target.id)}`),\n            onPointerLeave: (_evt) => Events.send(hovered, null)\n        }, [\n            h(\"div\", {\n                id: `${id}-titleBar`,\n                \"class\": \"titleBar\",\n            }, [\n                h(\"div\", {\n                    id: `${id}-runButton`,\n                    \"class\": \"titlebarButton runButton\",\n                    type,\n                    onClick: (evt) => {\n                        //console.log(evt);\n                        Events.send(runRequest, {id: `${Number.parseInt(evt.target.id)}`});\n                    },\n                }),\n                h(\"div\", {\n                    id: `${id}-title`,\n                    \"class\": \"title\",\n                    contentEditable: `${title.state}`,\n                    onKeydown: inputHandler,\n                }, title.title),\n                h(\"div\", {\n                    id: `${id}-edit`,\n                    \"class\": `titlebarButton editButton`,\n                    onClick: (evt) => {\n                        // console.log(evt);\n                        Events.send(titleEditChange, {id: `${Number.parseInt(evt.target.id)}`, state: !title.state});\n                    },\n                }, []),\n                h(\"div\", {\n                    id: `${id}-close`,\n                    \"class\": \"titlebarButton closeButton\",\n                    onClick: (evt) => {\n                        Events.send(remove, {id: `${Number.parseInt(evt.target.id)}`, type: \"remove\"})\n                    }\n                }),\n            ]),\n            h(\"div\", {\n                id: `${id}-resize`,\n                \"class\": \"resizeHandler\",\n            }, [])\n        ])\n    };\n\n    const windowElements = ((windows, positions, titles, codeEditors, windowTypes) => {\n        return h(\"div\", {\"class\": \"owner\"}, windows.map((id) => {\n            return windowDOM(id, positions.map.get(id), titles.map.get(id), codeEditors.map.get(id), windowTypes.map.get(id));\n        }));\n    })(windows, positions, titles, codeEditors, windowTypes);\n\n    const _myRender = ((windowElements, padElement) => {\n        render(windowElements, padElement);\n    })(windowElements, document.querySelector(\"#pad\"));\n"],["7","    const loadRequest = Events.receiver();\n\n    const _saver = ((windows, positions, titles, codeEditors, windowTypes) => {\n        const code = new Map([...codeEditors.map].filter(([_id, editor]) => editor.state).map(([id, editor]) => ([id, editor.state.doc.toString()])));\n        const data = stringify({\n            version: 1,\n            windows,\n            positions,\n            titles,\n            code,\n            windowTypes\n        });\n\n        const div = document.createElement(\"a\");\n        const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(data);\n        div.setAttribute(\"href\", dataStr);\n        div.setAttribute(\"download\", `renkon-pad.json`);\n        div.click();\n    })(windows, positions, titles, codeEditors, windowTypes, save);\n\n    const _loader = (() => {\n        const input = document.createElement(\"div\");\n        input.innerHTML = `<input id=\"imageinput\" type=\"file\" accept=\"application/json\">`;\n        const imageInput = input.firstChild;\n\n        imageInput.onchange = () => {\n            const file = imageInput.files[0];\n            if (!file) {return;}\n            new Promise(resolve => {\n                let reader = new FileReader();\n                reader.onload = () => resolve(reader.result);\n                reader.readAsArrayBuffer(file);\n            }).then((data) => {\n                const result = new TextDecoder(\"utf-8\").decode(data);\n                const loaded = parse(result);\n                if (loaded.version === 1) {\n                    Events.send(loadRequest, loaded);\n                }\n                imageInput.remove();\n            })\n            imageInput.value = \"\";\n        };\n        document.body.appendChild(imageInput);\n        imageInput.click();\n    })(load);\n"],["10","    const analyzed = ((codeEditors) => {\n        const programState = new Renkon.constructor(0);\n\n        const code = [...codeEditors.map].filter(([_id, editor]) => editor.state).map(([id, editor]) => ({blockId: id, code: editor.state.doc.toString()}));\n        programState.setupProgram(code);\n\n        const nodes = new Map();\n        for (let jsNode of programState.nodes.values()) {\n            let ary = nodes.get(jsNode.blockId);\n            if (!ary) {\n                ary = [];\n                nodes.set(jsNode.blockId, ary);\n            }\n            ary.push({inputs: jsNode.inputs, outputs: jsNode.outputs});\n        }\n\n        const exportedNames = new Map();\n        const importedNames = new Map();\n        for (let [id, subNodes] of nodes) {\n            const exSet = new Set();\n            exportedNames.set(id, exSet);\n\n            const inSet = new Set();\n            importedNames.set(id, inSet);\n\n            for (let subNode of subNodes) {\n                let outputs = subNode.outputs;\n                if (outputs.length > 0 && !/^_[0-9]/.exec(outputs)) {\n                    exSet.add(outputs);\n                }\n                for (let inString of subNode.inputs) {\n                    if (!/^_[0-9]/.exec(inString)) {\n                        inSet.add(inString);\n                    }\n                }\n            }\n        }\n\n        // {edgesOut: [{id: \"defined name\", dest: '2'}, ...],\n        //  edgesIn: [{id: \"defined name\", origin: '2'}, ...]}\n        const edges = new Map();\n\n        for (let [id, _] of nodes) {\n            const exporteds = exportedNames.get(id);\n            const importeds = importedNames.get(id);\n\n            const edgesOut = [];\n            const edgesIn = [];\n\n            for (let exported of exporteds) {\n                for (let [destId, destSet] of importedNames) {\n                    if (destSet.has(exported)) {\n                        edgesOut.push({id: exported, dest: destId});\n                    }\n                }\n            }\n            for (let imported of importeds) {\n                for (let [sourceId, sourceSet] of exportedNames) {\n                    if (sourceSet.has(imported)) {\n                        edgesIn.push({id: imported, origin: sourceId});\n                    }\n                }\n            }\n            edges.set(id, {edgesOut, edgesIn});\n        }\n\n        return edges;\n\n    })(codeEditors, hovered);\n\n    const line = (p1, p2, color, label) => {\n        let pl;\n        let pr;\n        if (p1.x < p2.x) {\n            pl = p1;\n            pr = p2;\n        } else {\n            pl = p2;\n            pr = p1;\n        }\n        const c0 = `${pl.x} ${pl.y}`;\n        const c1 = `${pl.x + (pr.x - pl.x) * 0.5} ${pl.y + (pr.y - pl.y) * 0.2}`;\n        const c2 = `${pr.x - (pr.x - pl.x) * 0.2} ${pl.y + (pr.y - pl.y) * 0.6}`;\n        const c3 = `${pr.x} ${pr.y}`;\n        return html`<path d=\"M ${c0} C ${c1} ${c2} ${c3}\" stroke=\"${color}\" fill=\"transparent\" stroke-width=\"2\" stroke-linecap=\"round\"></path><text x=\"${p1.x}\" y=\"${p1.y}\">${label}</text>`;\n    };\n\n    const hovered = Events.receiver();\n    const hoveredB = Behaviors.keep(hovered);\n\n    const graph = ((positions, analyzed, hoveredB, showGraph) => {\n        if (hoveredB === null || !showGraph) {\n            return [];\n        }\n\n        const edges = analyzed.get(hoveredB);\n\n        if (!edges) {return [];} // runner does not have edges\n\n        const outEdges = edges.edgesOut.map((edge, i) => {\n            let p1 = positions.map.get(hoveredB);\n            p1 = {x: p1.x + p1.width, y: p1.y};\n            p1 = {x: p1.x, y: p1.y + i * 20 + 10};\n            let p2 = positions.map.get(edge.dest);\n            p2 = {x: p2.x, y: p2.y + 10};\n            return line(p1, p2, \"#d88\", edge.id);\n        });\n\n        const inEdges = edges.edgesIn.map((edge, i) => {\n            let p1 = positions.map.get(edge.origin);\n            p1 = {x: p1.x + p1.width, y: p1.y};\n            p1 = {x: p1.x, y: p1.y + i * 20 + 10};\n            let p2 = positions.map.get(hoveredB);\n            p2 = {x: p2.x, y: p2.y + 10};\n            return line(p1, p2, \"#88d\", edge.id);\n        });\n\n        return html`<svg viewBox=\"0 0 ${window.innerWidth} ${window.innerHeight}\" xmlns=\"http://www.w3.org/2000/svg\">${outEdges}${inEdges}</svg>`;\n    })(positions, analyzed, hoveredB, showGraph);\n\n    render(graph, document.querySelector(\"#overlay\"));\n"]]},"positions":{"map":{"__map":true,"values":[["1",{"height":201.53125,"id":"1","width":490.17578125,"x":30,"y":60}],["2",{"height":441.31640625,"id":"2","width":653.85546875,"x":555.6171875,"y":47.28125}],["4",{"height":444.96875,"id":"4","width":626.453125,"x":1306.09375,"y":105.84375}],["5",{"height":367.46484375,"id":"5","width":561.66796875,"x":617.203125,"y":509.5625}],["7",{"height":310.578125,"id":"7","width":459.87109375,"x":47.14453125,"y":316.63671875}],["10",{"height":295.02734375,"id":"10","width":545.31640625,"x":1398.49609375,"y":606.12109375}]]}},"titles":{"map":{"__map":true,"values":[["1",{"id":"1","state":false,"title":"Initialization"}],["2",{"id":"2","state":false,"title":"Data Structure"}],["4",{"id":"4","state":false,"title":"User Interaction"}],["5",{"id":"5","state":false,"title":"Rendering"}],["7",{"id":"7","state":false,"title":"Save and Load"}],["10",{"id":"10","state":false,"title":"Graphing"}]]}},"version":1,"windowTypes":{"map":{"__map":true,"values":[["1","code"],["2","code"],["4","code"],["5","code"],["7","code"],["10","code"]]}},"windows":["1","2","4","5","7","10"]}